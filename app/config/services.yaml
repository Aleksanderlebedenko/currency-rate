parameters:
  currency_provider: '%env(DEFAULT_CURRENCY_PROVIDER)%'

services:
  Symfony\Component\Serializer\Encoder\XmlEncoder: ~
  Symfony\Component\PropertyInfo\Extractor\PhpDocExtractor: ~
  Symfony\Component\Serializer\NameConverter\MetadataAwareNameConverter: ~
  Symfony\Component\Serializer\Normalizer\DateTimeNormalizer: ~
  Symfony\Component\Serializer\Normalizer\ArrayDenormalizer: ~
  Symfony\Component\Serializer\Normalizer\ObjectNormalizer:
    arguments:
      $nameConverter: '@Symfony\Component\Serializer\NameConverter\MetadataAwareNameConverter'
      $propertyTypeExtractor: '@Symfony\Component\PropertyInfo\Extractor\PhpDocExtractor'

  # Define the Serializer service with arguments
  Symfony\Component\Serializer\Serializer:
    arguments:
      - [
        '@Symfony\Component\Serializer\Normalizer\ObjectNormalizer',
        '@Symfony\Component\Serializer\Normalizer\DateTimeNormalizer',
        '@Symfony\Component\Serializer\Normalizer\ArrayDenormalizer',
      ]
      - [ '@Symfony\Component\Serializer\Encoder\XmlEncoder' ]

  # Optional: create an alias for convenience
  xml_serializer: '@Symfony\Component\Serializer\Serializer'
  _defaults:
    autowire: true
    autoconfigure: true

  App\:
    resource: '../src/'
    exclude:
      - '../src/DependencyInjection/'
      - '../src/Entity/'
      - '../src/Kernel.php'

  App\Provider\CurrencyRatesProvider\CBRProvider:
    arguments:
      $url: '%env(CBR_API_URL)%'
      $serializer: '@xml_serializer'
  App\Provider\CurrencyRatesProvider\ECBProvider:
    arguments:
      $url: '%env(ECB_API_URL)%'
      $serializer: '@xml_serializer'

  App\Provider\CurrencyRateProvider\CurrencyProviderFactory:
    arguments:
      $cbrCurrencyRateProvider: '@App\Provider\CurrencyRateProvider\CBRCurrencyRateProvider'
      $ecbCurrencyRateProvider: '@App\Provider\CurrencyRateProvider\ECBCurrencyRateProvider'

  # Define the active provider as a service with conditional logic
  App\Provider\CurrencyRateProvider\ActiveCurrencyRateProvider:
    class: 'App\Provider\CurrencyRateProvider\CurrencyRateProviderInterface'
    factory: [ '@App\Provider\CurrencyRateProvider\CurrencyProviderFactory', 'createProvider' ]
    arguments:
      - '%currency_provider%'
    public: true

    # Example service that will use the active currency provider
  App\Service\CurrencyConversion:
    arguments:
      $currencyRateProvider: '@App\Provider\CurrencyRateProvider\ActiveCurrencyRateProvider'

  _instanceof:
    App\Provider\CurrencyRatesProvider\CurrencyRatesProviderInterface:
      tags: [ 'currency_rates_provider' ]

    App\Service\UpdateRates:
      calls:
        - method: updateRates
          arguments:
            - '@App\Provider\CurrencyRatesProvider\CBRProvider'
            - '@App\Provider\CurrencyRatesProvider\ECBProvider'
